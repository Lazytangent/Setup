#+title: Arch Linux Setup Notes

The notes here follow two guides:
1. [[https://wiki.archlinux.org/title/installation_guide][Arch Linux Installation Guide]]
2. [[https://itsfoss.com/install-arch-linux/][It's FOSS - How to Install Arch Linux]]
   
* Pre-installation
** Verify the boot mode
To verify the boot mode, list the =efivars= directory:
#+begin_src bash
  ls /sys/firmware/efi/efivars
#+end_src

If the command shows the directory without error, then the system is
booted in UEFI mode. If the directory does not exist, the system may
be booted in BIOS or CSM mode. If the system did not boot in the mode
you desired, refer to your motherboard's manual.

(I probably wanted UEFI mode here...)
** Connect to the Internet
*** Ensure your network interface is listed and enabled
#+begin_src bash
  ip link
#+end_src
*** Connect to the internet
**** Wi-Fi -- authenticate to the wireless network using =iwctl=
[[https://wiki.archlinux.org/title/Iwd#iwctl][iwctl docs]]
***** Switch to a an interactive prompt
#+begin_src bash
  iwctl
#+end_src

***** List all available commands
#+begin_src bash
  [iwd]# help
#+end_src
***** Connect to a network
#+begin_src bash
  device list
  device <device> set-property Powered on # turn on device
  adapter <adapter> set-property Powered on # turn on adapter
#+end_src
****** Initiate a scan for networks
#+begin_src bash
  station <device> scan # does not output anything
#+end_src
****** List all availble networks
#+begin_src bash
  station <device> get-networks
#+end_src
****** Connect to a network
#+begin_src bash
  station <device> connect <SSID> # will prompt for passphrase
#+end_src
***** Test network connection
#+begin_src bash
  ping archlinux.org
  ping google.com
#+end_src
** Update the system clock
#+begin_src bash
  timedatectl status
#+end_src
** Partition the disks
To identify the disks' block devices
#+begin_src bash
  fdisk -l
#+end_src

Following partitions are *required* for a chosen device:
- One partition for the root directory =/=
- For booting in UEFI mode: an EFI system partition

Use =fdisk= to modify the partition tables

#+begin_src bash
  fdisk /dev/<disk_to_be_partitioned>
#+end_src

*** Create EFI boot partition
- Mount to =/mnt/boot=
- At least 300 MiB
*** Swap Partition
- At least 512 MiB
*** Root
- Mount to =/mnt=
- Rest of the device

** Format the partitions
*** Regular file system (root)
#+begin_src bash
  mkfs.ext4 /dev/<root>
#+end_src
*** Swap
#+begin_src bash
  mkswap /dev/<swap>
#+end_src
*** EFI (boot)
#+begin_src bash
  mkfs.fat -F 32 /dev/<boot>
#+end_src
** Mount the file systems
Mount the root volume to =/mnt=
#+begin_src bash
  mount /dev/<root> /mnt
#+end_src

*** Create any remaining mount points and mount their corresponding volumes
#+begin_src bash
  mount --mkdir /dev/<boot> /mnt/boot
#+end_src
*** Create a swap volume
#+begin_src bash
  swapon /dev/<swap>
#+end_src
* Installation
#+begin_src bash
  pacstrap -K /mnt base linux linux-firmware vim networkmanager ntp
#+end_src

After the initial =pacstrap -K= command has been run, you can add more
packages to the installation of Arch Linux by appending packages to
the =pacstrap= command

#+begin_src bash
  pacstrap /mnt <packages...>
#+end_src
* Configure the system
** Generate an =fstab= file
#+begin_src bash
  genfstab -U /mnt >> /mnt/etc/fstab
#+end_src
** Chroot into the new system
#+begin_src bash
  arch-chroot /mnt
#+end_src
** Set the Time Zone
#+begin_src bash
  ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime
#+end_src

It might also be useful to examine the contents of the
=/usr/share/zoneinfo/= directory to see what's available.

#+begin_src bash
  hwclock --systohc # generates /etc/adjtime
#+end_src
** Network configuration
Create the hostname file
#+begin_src bash
  # /etc/hostname

  <hostname>
#+end_src

The hostname will be the name of your computer.

** Set the root password
#+begin_src bash
  passwd
#+end_src

** Install bootloader
#+begin_src bash
  pacman -S grub efibootmgr
  mkdir /boot/efi
  mount /dev/<boot> /boot/efi
  grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi
  grub-mkconfig -o /boot/grub/grub.cfg
#+end_src
** Create additional users
*** Install the sudo package
#+begin_src bash
  pacman -S sudo
#+end_src
*** Create a new user
#+begin_src bash
  useradd -m <username>
  passwd <username>
#+end_src

Modify the user to have the right groups
#+begin_src bash
  usermod -aG wheel,audio,video.storage <username>
#+end_src

*** Edit the visudo file or sudoers file
This file can be found in =/etc/=.

Change the line that allows members of group wheel to execute any
command. (This means removing the percent sign at the beginning of the
second line of the example.)
#+begin_src sudoers
  ## Uncomment to allow members of group wheel to execute any command
  %wheel ALL=(ALL:ALL) ALL
#+end_src

*** Install a desktop environment
#+begin_src bash
  pacman -S wayland sway swaybg swayimg swaylock swayidle waybar # There might be some missing sway packages to install. Search pacman before installing
  systemctl enable NetworkManager.service
#+end_src
*** Some other packages to install
All of these programs can be installed once booted into the normal system as
well. There's no particular reason you should have to install these now. It's
just nice to get out of the way early.

- =openssh=
- =git=
- =github-cli=
- =firefox-developer-edition=
  - A regular browser would work here. This is just my preference.
- =kitty=
  - Or another terminal. Sway assumes a default of =foot=

** Finishing up
#+begin_src bash
  exit # leave the chroot session
  umount /mnt # OR
  umount -l /mnt
#+end_src
* Once in the system
The system should start up in =tty= mode and prompt you for a username. Assuming
you've made a new user in the previous steps, use that user's username and
password to login. You'll be prompted for your password separately.

After logging in, you'll still be in the =tty=, but it's time to do some basic
setup before moving into using Sway.

** Basic Sway Config stuff
With =sway= installed, its default config file will be in =/etc/sway=. Copy the
default =config= file to =~/.config/sway=.

#+begin_src bash
mkdir -p ~/.config/sway
cp /etc/sway/config ~/.config/sway/config
#+end_src

(Optional) Add the following blocks to the newly copied config at
=~/.config/sway/config=.

#+begin_src i3config
input "type:touchpad" {
    natural_scroll enabled
}

input "type:keyboard" {
    xkb_options ctrl:nocaps
}
#+end_src

This will enable natural scroll on the touchpad and make the Caps Lock key on
any keyboard act as a Ctrl key.

If you've installed a terminal emulator that's not =foot=, then you'll want to
change that in Sway's =config= file so that the =$term= variable is set to the right
program.

If you have a program launcher in mind, you can set that in the Sway =config= file
as well. I prefer =kickoff= but it requires some build steps.

** (Optional) Install =kickoff= as a program launcher
Per the [[https://wiki.archlinux.org/title/Arch_User_Repository][instructions available at the AUR wiki]]

#+begin_src bash
sudo pacman -S --needed base-devel
git clone https://aur.archlinux.org/kickoff.git
cd kickoff
makepkg -sic # This will prompt you for your password so it can install the program
#+end_src
