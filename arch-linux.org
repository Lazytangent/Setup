#+title: Arch Linux Setup Notes

The notes here follow two guides:
1. [[https://wiki.archlinux.org/title/installation_guide][Arch Linux Installation Guide]]
2. [[https://itsfoss.com/install-arch-linux/][It's FOSS - How to Install Arch Linux]]

* Pre-installation
** Verify the boot mode
To verify the boot mode, list the =efivars= directory:
#+begin_src bash
  ls /sys/firmware/efi/efivars
#+end_src

If the command shows the directory without error, then the system is
booted in UEFI mode. If the directory does not exist, the system may
be booted in BIOS or CSM mode. If the system did not boot in the mode
you desired, refer to your motherboard's manual.

(I probably wanted UEFI mode here...)
** Connect to the Internet
*** Ensure your network interface is listed and enabled
#+begin_src bash
  ip link
#+end_src
*** Connect to the internet
**** Wi-Fi -- authenticate to the wireless network using =iwctl=
[[https://wiki.archlinux.org/title/Iwd#iwctl][iwctl docs]]
***** Switch to a an interactive prompt
#+begin_src bash
  iwctl
#+end_src

***** List all available commands
#+begin_src bash
  [iwd]# help
#+end_src
***** Connect to a network
#+begin_src bash
  device list
  device <device> set-property Powered on # turn on device
  adapter <adapter> set-property Powered on # turn on adapter
#+end_src
****** Initiate a scan for networks
#+begin_src bash
  station <device> scan # does not output anything
#+end_src
****** List all availble networks
#+begin_src bash
  station <device> get-networks
#+end_src
****** Connect to a network
#+begin_src bash
  station <device> connect <SSID> # will prompt for passphrase
#+end_src
***** Test network connection
#+begin_src bash
  ping archlinux.org
  ping google.com
#+end_src
** Update the system clock
#+begin_src bash
  timedatectl status
#+end_src
** Partition the disks
To identify the disks' block devices
#+begin_src bash
  fdisk -l
#+end_src

Following partitions are *required* for a chosen device:
- One partition for the root directory =/=
- For booting in UEFI mode: an EFI system partition

Use =fdisk= to modify the partition tables

#+begin_src bash
  fdisk /dev/<disk_to_be_partitioned>
#+end_src

*** Create EFI boot partition
- Mount to =/mnt/boot=
- At least 300 MiB
*** Swap Partition
- At least 512 MiB
*** Root
- Mount to =/mnt=
- Rest of the device

** Format the partitions
*** Regular file system (root)
#+begin_src bash
  mkfs.ext4 /dev/<root>
#+end_src
*** Swap
#+begin_src bash
  mkswap /dev/<swap>
#+end_src
*** EFI (boot)
#+begin_src bash
  mkfs.fat -F 32 /dev/<boot>
#+end_src
** Mount the file systems
Mount the root volume to =/mnt=
#+begin_src bash
  mount /dev/<root> /mnt
#+end_src

*** Create any remaining mount points and mount their corresponding volumes
#+begin_src bash
  mount --mkdir /dev/<boot> /mnt/boot
#+end_src
*** Create a swap volume
#+begin_src bash
  swapon /dev/<swap>
#+end_src
* Installation
#+begin_src bash
  pacstrap -K /mnt base linux linux-firmware vim networkmanager ntp
#+end_src

After the initial =pacstrap -K= command has been run, you can add more
packages to the installation of Arch Linux by appending packages to
the =pacstrap= command

#+begin_src bash
  pacstrap /mnt <packages...>
#+end_src
* Configure the system
** Generate an =fstab= file
#+begin_src bash
  genfstab -U /mnt >> /mnt/etc/fstab
#+end_src
** Chroot into the new system
#+begin_src bash
  arch-chroot /mnt
#+end_src
** Set the Time Zone
#+begin_src bash
  ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime
#+end_src

It might also be useful to examine the contents of the
=/usr/share/zoneinfo/= directory to see what's available.

#+begin_src bash
  hwclock --systohc # generates /etc/adjtime
#+end_src
** Network configuration
Create the hostname file
#+begin_src bash
  # /etc/hostname

  <hostname>
#+end_src

The hostname will be the name of your computer.

** Set the root password
#+begin_src bash
  passwd
#+end_src

** Install bootloader
#+begin_src bash
  pacman -S grub efibootmgr
  mkdir /boot/efi
  mount /dev/<boot> /boot/efi
  grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi
  grub-mkconfig -o /boot/grub/grub.cfg
#+end_src
** Create additional users
*** Install the sudo package
#+begin_src bash
  pacman -S sudo
#+end_src
*** Create a new user
#+begin_src bash
  useradd -m <username>
  passwd <username>
#+end_src

Modify the user to have the right groups
#+begin_src bash
  usermod -aG wheel,audio,video,storage,input <username>
#+end_src

*** Edit the visudo file or sudoers file
This file can be found in =/etc/=.

Change the line that allows members of group wheel to execute any
command. (This means removing the percent sign at the beginning of the
second line of the example.)
#+begin_src sudoers
  ## Uncomment to allow members of group wheel to execute any command
  %wheel ALL=(ALL:ALL) ALL
#+end_src

*** Install a desktop environment
**** Sway/Wayland
#+begin_src bash
  pacman -S wayland sway swaybg swayimg swaylock swayidle waybar # There might be some missing sway packages to install. Search pacman before installing
#+end_src
*** Some other packages to install
All of these programs can be installed once booted into the normal system as
well. There's no particular reason you should have to install these now. It's
just nice to get out of the way early.

- =openssh=
- =git=
- =github-cli=
- =firefox-developer-edition=
  - A regular browser would work here. This is just my preference.
- =kitty=
  - Or another terminal. Sway assumes a default of =foot=
**** Enable Network Manager service
#+begin_src bash
systemctl enable NetworkManager.service
#+end_src
**** Enable SSHD
#+begin_src bash
systemctl enable sshd
#+end_src

** Finishing up
#+begin_src bash
  exit # leave the chroot session
  umount /mnt # OR
  umount -l /mnt
#+end_src
* Once in the system
The system should start up in =tty= mode and prompt you for a username. Assuming
you've made a new user in the previous steps, use that user's username and
password to login. You'll be prompted for your password separately.

After logging in, you'll still be in the =tty=, but it's time to do some basic
setup before moving into using Sway.

** Basic Sway Config stuff
With =sway= installed, its default config file will be in =/etc/sway=. Copy the
default =config= file to =~/.config/sway=.

#+begin_src bash
mkdir -p ~/.config/sway
cp /etc/sway/config ~/.config/sway/config
#+end_src

(Optional) Add the following blocks to the newly copied config at
=~/.config/sway/config=.

#+begin_src i3config
input "type:touchpad" {
    natural_scroll enabled
    tap enabled
}

input "type:keyboard" {
    xkb_options ctrl:nocaps
}
#+end_src

This will enable natural scroll on the touchpad and make the Caps Lock key on
any keyboard act as a Ctrl key.

If you've installed a terminal emulator that's not =foot=, then you'll want to
change that in Sway's =config= file so that the =$term= variable is set to the right
program.

If you have a program launcher in mind, you can set that in the Sway =config= file
as well. I prefer =kickoff= but it requires some build steps.

** (Optional) Install =kickoff= as a program launcher
Per the [[https://wiki.archlinux.org/title/Arch_User_Repository][instructions available at the AUR wiki]]

I like cloning things down in the =~/.local/src= directory, so you might want to
make and move into whatever directory you'd prefer to have the repository at
before starting.

#+begin_src bash
sudo pacman -S --needed base-devel
git clone https://aur.archlinux.org/kickoff.git
cd kickoff
makepkg -sic # This will prompt you for your password so it can install the program
#+end_src

** Moving into =sway=
With the necessary programs in place, we can launch =sway= and do some things in
the Window Manager.

#+begin_src bash
sway
#+end_src

** Authenticating with GitHub (to clone or create a new dotfiles repo)
#+begin_src bash
gh auth login
#+end_src

You will need to open a browser at [[https://github.com/login/device]] to complete
the flow.

*** Basic =git= config
#+begin_src bash
git config --global user.name <name>
git config --global user.email <email>
git config --global init.defaultBranch main
git config --global push.autoSetupRemote true
#+end_src
** Setting up a new GPG key

#+begin_src bash
gpg --export --armor <KEY_ID> | gh gpg-key add -
#+end_src

Attempting to run the above without the necessary scopes on your token for the
gh cli will tell you to run a command to add that scope, which will take you
through the authentication flow again.

*** Telling =git= about your =gpg= key
#+begin_src bash
git config --global user.signingkey <KEY_ID>
git config --global commit.gpgsign true
#+end_src
** Handle dotfiles
[[https://www.atlassian.com/git/tutorials/dotfiles][Atlassian dotfiles tutorial]]
*** New repository
*** Clone existing dots
#+begin_src bash
git clone --bare <git-repo-url> $HOME/.cfg
alias config="/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME"
config checkout
config config --local status.showUntrackedFiles no
#+end_src

**** =config checkout= failures
Create a backup directory for the existing config files that will get replaced
by the ones in the dotfiles repository.

#+begin_src bash
mkdir -p .config-backup
#+end_src

Attempt to run the following script:
#+begin_src bash
config checkout 2>&1 | grep -E "\s+\." | awk {'print $1'} | xargs -I{} mv {} .config-backup/{}
#+end_src

This might also fail, in which case, create the nested directory structure
that's required. The error will show that some directories don't exist in the
=.config-backup/= directory.
** Changing the default shell
*** List all installed shells
#+begin_src bash
chsh -l
#+end_src
*** Set one as default for your user
#+begin_src bash
chsh -s <path-to-shell>
#+end_src
** Configuring =sway= to auto-start
*** Make sure Sway can access your seat
Using =seatd= which is installed alongside Sway, add your user to the =seat= user group, enable and start =seatd.service=, re-log, and you'll be able to use Sway if the =seatd.service= started properly. A restart might be necessary.

#+begin_src bash
sudo usermod -aG seat <username>
groups <username>
sudo systemctl enable --now seatd.service
#+end_src
*** Add the following code block to your shell initialization file
#+begin_src bash
if [ -z "$WAYLAND_DISPLAY" ] && [ "$XDG_VTNR" -eq 1 ]
then
    exec sway
fi
#+end_src
** =waybar= config
*** =mediaplayer.py= script
The Python script needs to have access to the =PyGObject= library. This library
requires having the =gobject-introspection= development package available.

#+begin_src bash
sudo pacman -S gobject-introspection
pip install PyGObject
#+end_src
**** If using =/usr/bin/python3=...
=pip= probably won't be installed for =/usr/bin/python3=. Install it with the
following command:

#+begin_src bash
/usr/bin/python3 -m ensurepip
#+end_src
* Installing packages from the AUR
** Install =base-devel=
This step only happens once ever. You do not need to do this again for every
package you install from the AUR.

#+begin_src bash
sudo pacman -S --needed base-devel
#+end_src
** Obtain the files
Use =git= to clone the repository
** Acquire a PGP public key if needed
=makepkg= will fail to build and install if the PKGBUILD has a signature file in
the form of =.sig= or =.asc= is in the source array.

Use a KEY_ID in the PKGBUILD =validpgpkeys= array.

#+begin_src
gpg --recv-keys <KEY_ID>
#+end_src
** Build the package
#+begin_src bash
cd <package_name>
makepkg -sic
#+end_src
* Troubleshooting
** Pacman - The requested URL returned error: 404
We probably need to update the local package database.
#+begin_src bash
sudo pacman -Syu
#+end_src
* =grub= stuff
#+begin_src txt
insmod fat
set root=(hd1,gpt3)
linux (hd1,gpt1)/vmlinuz-linux root=/dev/nvme0n1p3
initrd (hd1,gpt1)/initramfs-linux.img
#+end_src
* =yay=
** Installation
#+begin_src bash
git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si
#+end_src
** First Usage
#+begin_src bash
yay -Y --gendb # Check for packages installed from the AUR without yay
yay -Syu --devel
yay -Y --devel --save
#+end_src
* Random things
** =whereis=
Shows where a program is installed

#+begin_src bash
whereis <program>
#+end_src
** =URxvt=
*** Copy
Ctrl + Alt + c
*** Paste
Ctrl + Alt + v
** =zoxide=
Use =zi= for interactive =cd= using =fzf=
** =scp=
#+begin_src bash
scp <file> <location>
#+end_src

*** Freenas
Location for freenas is =freenas:<path>= from =/mnt/Storage3/petermai= since
that's the account set up in the =~/.ssh/config=
** =ssh-copy-id=
#+begin_src bash
ssh-copy-id [-i <identity_file>] <username>@<host>
#+end_src
** Count commits for a repository
#+begin_src bash
git log --oneline | wc -l
#+end_src
** =pacman= and =yay= colored output
*** =/etc/pacman.conf=
Uncomment the line with =Color= on it.
** Other programs to install
- =alacritty=
- =bazel=
- =clipman=
- =exa=
- =extra/bind=
  - Provides tools like =dig=
- =fd=
- =foot=
- =fzf=
- =git=
- =github-cli=
- =go=
- =htop=
- =imv=
- =jq=
- =kickoff=
- =libgccjit=
  - For Emacs compiled =--with-native-compilation=
- =light=
- =llvm=
- =mako=
- =man-db=
- =man-pages=
- =ncspot=
- =pamixer=
- =pavucontrol=
- =pulseaudio=
- =playerctl=
- =pyenv=
- =python-pywal=
- =ripgrep=
- =sov=
- =spotifyd=
- =starship=
- =tree=
- =wev=
- =wob=
- =zathura=
- =zathura-pdf-mupdf=
- =zoxide=
*** C++/C Stuff
- =llvm=
  - For =clangd=
- =ccls=
*** Fonts
- =ttf-fira-code=
- =ttf-fira-mono=
- =ttf-fira-sans=
- =ttf-firacode-mono=

** System Clock is Wonky
*** Enable ntpd.service
#+begin_src shell
  pacman -Syu ntp
  systemctl enable --now ntpd.service
#+end_src
*** Tell timedatectl to use ntp
#+begin_src shell
  timedatectl set-ntp true
#+end_src

** Changing Audio Output with =pacmd=
This is specific for =pavilion=
#+begin_src shell
  pacmd set-card-profile alsa_card.pci-0000_00_1f.3 output:hdmi-stereo+input:analog-stereo
#+end_src

It is also possible to change this in =pavucontrol= in the =Configuration= tab's
profiles settings.

** Default web browser in Arch Linux
[[https://dev.to/haxnet/default-web-browser-in-arch-linux-11em][Link]]

#+begin_src shell
  xdg-settings get default-web-browser

  xdg-settings set org.qutebrowser.qutebrowser.desktop
#+end_src

* On Mac
** Wi-Fi during ISO boot
The MacBook Air 13 didn't seem to have Wi-Fi capabilities when booted into the
Arch Linux Installation ISO. Connecting an Ethernet cable through the
Thunderbolt 2/mini DisplayPort port before a reboot into the ISO allowed for
internet connection via Ethernet.

** Check what wireless card you have:
#+begin_src bash
lspci | grep Network
#+end_src

I had a Broadcom card that required the broadcom-wl drivers.

#+begin_src bash
pacman -S broadcom-wl
#+end_src

This will make setting up WiFi possible when fully booted into the system.
** Power management
#+begin_src bash
sudo pacman -S tlp
sudo systemctl enable --now tlp
#+end_src
* QMK Firmware
[[https://docs.qmk.fm/#/faq_build?id=linux-udev-rules][Linux Can't Program]]
* Locale
See [[https://wiki.archlinux.org/title/Locale][Locale]] for configuring the Locale.

I had set the =LANG= variable in the =/etc/locale.conf= file to =en_US.UTF-8= for some
reason but hadn't configured the rest of the system to generate and use that
locale settings so I was getting an error from the =man= programs:

#+begin_example
manpath: can't set the locale; make sure $LC_* and $LANG are correct
#+end_example
* Bluetooth Issue
Loading into =bluetoothctl= and running the =list= command to see the list of
available bluetooth controllers for use showed nothing.

Unload and load the bluetooth module on the kernel:
#+begin_src shell
% rmmod btusb # Wait a moment before running the next command
% modprobe btusb
#+end_src

You can check if the module is loaded in the kernel with:
#+begin_src shell
% lsmod | rg btusb
#+end_src
