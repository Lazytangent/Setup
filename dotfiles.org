#+title: Dotfiles

* Setup the Repository on GitHub
#+begin_src bash
  gh repo create
#+end_src

* Set up the local repository
#+begin_src bash
  git init --bare $HOME/.cfg
#+end_src

* Create the alias
#+begin_src bash
  alias config="/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME"
#+end_src

You can replace the "/usr/bin/git" portion with "$(which git)" if your
shell supports the "which" keyword.

* Use the alias to set the config for the local git repo
#+begin_src bash
  config config --local status.showUntrackedFiles no
#+end_src

This avoids git showing all the other files when you run the =status=
command.
* Bare clone
When cloning with =git clone --bare=, the =fetch= property for the remote repository
doesn't get set. While you can still push to and pull from the remote repository
in question, you don't get the extra status information when you run =git status=
like how many commits you have ahead locally.

To set it up all you need to do is set up the =fetch= property on the remote in
the local git repository's settings.

Under the section for the remote in question add:
#+begin_src gitconfig
[remote "origin"]
	fetch = +refs/heads/*:refs/remotes/origin/*
#+end_src
